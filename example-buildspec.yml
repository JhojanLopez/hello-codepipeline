#this is an example about how can you use buildspec.yml on CodeBuild*
version: 0.2

#we can define environment variables
env:
  variables: #environment variables:
    ENVIRONMENT: "production"
    APP_NAME: "my-app"
  parameter-store:
    DB_PASSWORD: "/my-app/db-password"  # Obtiene la contraseña desde AWS Parameter Store
  secrets-manager:
    API_KEY: "my-secret-api-key"  # Obtiene secretos desde AWS Secrets Manager
  exported-variables:
    - BUILD_ID  # Variables que se exportan entre fases

cache:
  paths: #this can be used to improve times of compilation because this saves dependencies on cache.
    - '/root/.m2/**/*'  # Cache de dependencias Maven
    - '/root/.npm/**/*'  # Cache de paquetes npm

#phases indicates what do in determinate time or stage (phase)
phases:
  install: #install phase. * here you can define tools to use or install software required to compile your code. *
    runtime-versions: #this indicates what version will use. if you declare this versions will install automatically
      java: corretto17
      nodejs: 18
    commands: # commands to indicate what do (linux commands)
      - echo "Instalando dependencias..."
      - apt-get update && apt-get install -y jq
      - mvn install -DskipTests # we can install other tools that you required
      - npm install

  pre_build: #pre_build phase. * here you can do previous task such as authentication or compile frontend
    commands:
      - echo "Ejecutando pre-build steps..."
      - echo "Compilando frontend..."
      - npm run build
      - echo "Autenticando en AWS ECR..."
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com

  build: #build phase. * here you can compile backend or build a docker image. also you can run tests*
    commands:
      - echo "Compilando backend..."
      - mvn package
      - echo "Construyendo imagen Docker..."
      - docker build -t my-app:$CODEBUILD_RESOLVED_SOURCE_VERSION .
      - docker tag my-app:$CODEBUILD_RESOLVED_SOURCE_VERSION 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app:$CODEBUILD_RESOLVED_SOURCE_VERSION

  post_build: #post_build phase. * here you can release artifacts or notify to CodeDeploy *
    commands:
      - echo "Subiendo artefactos y Docker image..."
      - docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo "Notificando a AWS CodeDeploy..."
      - aws deploy create-deployment --application-name my-app --deployment-group-name my-app-group --s3-location bucket=my-app-artifacts,bundleType=zip,key=deploy.zip
      - echo "Build finalizado correctamente."

artifacts: # *  here you can indicate what files you want to save *
  files:
    - target/*.jar
    - frontend/dist/**/*  # Incluir el frontend compilado
  discard-paths: no  # Mantiene la estructura de carpetas
  base-directory: build-output  # Carpeta raíz para artefactos

reports: # * here you can indicate to CodeBuild that reports will be generated *
  test-reports: # name personalized
    files:
      - target/surefire-reports/*.xml  # Reportes de pruebas unitarias
    base-directory: target/
    file-format: JUNITXML # this indicates that reports will be in JUnit format.

logs: # * this section indicates where logs will be stored. (it's generated by CodeBuild). We can enable CloudWatch or Amazon S3 *
  cloudWatchLogs: # if this section does not include, it will not send to CloudWatch
    status: ENABLED  # Habilita logs en CloudWatch
  s3Logs:  # if this section does not include, it will not send to Amazon S3
    status: ENABLED  # Guarda logs en S3
    location: my-log-bucket/logs/ #this indicates where logs will be putted on the bucket